import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from PIL import Image

st.set_page_config(
    page_title="Vulnerability Assessment Penetration Test Report",
    layout="wide",
    initial_sidebar_state="auto",
)


@st.cache
def get_data(df):
    data = pd.read_csv(df)
    return data


def dist_plot(df):
    fig = plt.figure(figsize=(20, 5))
    sns.displot(data=df, x=df['Risk'])
    plt.title("Risk vs. Protocol")
    plt.show()
    return st.pyplot(fig)


def bar_plot(x, y):
    fig = plt.figure(figsize=(20, 5))
    sns.barplot(x=x, y=y, hue=x, capsize=0.2)
    plt.title("Risk vs. Protocol")
    plt.show()
    return st.pyplot(fig)


def count_plot(x, df):
    fig = plt.figure(figsize=(20, 5))
    sns.countplot(x=x, hue=x, data=df)
    plt.title("Risk vs. Protocol")
    plt.show()
    return st.pyplot(fig)


def hist_plot(x, df):
    fig = plt.figure(figsize=(20, 5))
    sns.histplot(x=x, hue=x, data=df, cbar=True)
    plt.title("Risk vs. Protocol")
    plt.show()
    return st.pyplot(fig)


def main():
    st.image('././sdsdlogo.png')
    st.title('Vulnerability Assessment Penetration Test Report')
    file = st.file_uploader('Please select the generated report for company', type=['csv'])
    if file is not None:
        df = pd.read_csv(file)
        df.dropna(subset=['Solution', 'CVE', 'CVSS v2.0 Base Score', 'CVSS v3.0 Base Score', 'CVSS v2.0 Temporal Score',
                          'CVSS v3.0 Temporal Score'], inplace=True, axis=0)
        df.dropna(how='any', inplace=True, axis=1)
        df.drop_duplicates(inplace=True, ignore_index=True)
        st.write(df)
        st.markdown(
            'You have {} vulnerabilities and below is a table of all vulnerabilities'.format(df['Risk'].count()))
        view_more = st.radio('Please select desired', ['Graphical Analysis', 'Description', 'Solutions'])
        if view_more == "Graphical Analysis":
            data = df.iloc[:, [3]]
            risk_count = data.groupby([df['Risk']]).count()
            st.write(risk_count)
            st.markdown('Graphical Analysis of number of risk')
            hist_plot(x=df['Risk'], df=df)
        elif view_more == 'Description':
            st.subheader('Find Hist Plot of your data')
            st.markdown('The above graph shows lot you have high level of vulnerability')
            data = df.iloc[:, [1, 3, 5, 7, 9]].set_index('Risk')
            number = st.slider('Slide me', min_value=10, max_value=len(data))
            if number:
                select = st.selectbox('Filter all risk by category', ['Critical', 'High', 'Medium'])
                if select == 'Critical':
                    query = data.query("Risk=='Critical'")
                    st.table(query.head(int(number)))
                if select == 'High':
                    query = data.query("Risk=='High'")
                    st.table(query.head(int(number)))
                if select == 'Medium':
                    query = data.query("Risk=='Medium'")
                    st.table(query.head(int(number)))
        elif view_more == 'Solutions':
            st.markdown('The table below shows lot you have high level of vulnerability')
            data = df.iloc[:, [1, 3, 9, 10]].set_index('Risk')
            number = st.slider('Slide me', min_value=10, max_value=len(data))
            if number:
                select = st.selectbox('Filter all risk by category', ['Critical', 'High', 'Medium'])
                if select == 'Critical':
                    query = data.query("Risk=='Critical'")
                    st.table(query.head(int(number)))
                if select == 'High':
                    query = data.query("Risk=='High'")
                    st.table(query.head(int(number)))
                if select == 'Medium':
                    query = data.query("Risk=='Medium'")
                    st.table(query.head(int(number)))


if __name__ == '__main__':
    main()
